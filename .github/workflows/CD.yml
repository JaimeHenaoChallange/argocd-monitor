name: CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'chart/argocd-monitor/**'
      - '.github/workflows/CD.yml'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME_JAIME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD_JAIME }}
  IMAGE_NAME: argocd-monitor
  CHART_PATH: chart/argocd-monitor
  NAMESPACE: argocd

jobs:
  build-push-deploy:
    runs-on: self-hosted # ¡Usa el runner local!

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Install yq # ¡NUEVO PASO! (Alternativa 2, si no lo instalas en la VM)
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
        # Si ya instalaste yq en la VM, puedes eliminar o comentar este paso.

      - name: Get and Increment Version
        id: get-version
        run: |
          current_tag=$(yq e '.image.tag' "$CHART_PATH/values.yaml")
          if [[ "$current_tag" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            major=$(echo "$current_tag" | cut -d. -f1); minor=$(echo "$current_tag" | cut -d. -f2); patch=$(echo "$current_tag" | cut -d. -f3); new_patch=$((patch + 1)); new_version="$major.$minor.$new_patch"
          elif [[ "$current_tag" == "latest" ]] || [[ -z "$current_tag" ]]; then new_version="0.1.0"; else new_version=$(date +%Y%m%d%H%M%S); fi
          echo "new_tag=$new_version" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.new_tag }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.new_tag }}

      - name: Update values.yaml and commit
        run: |
          yq e ".image.tag = \"${{ steps.get-version.outputs.new_tag }}\"" -i "$CHART_PATH/values.yaml"; yq e ".image.repository = \"${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}\"" -i "$CHART_PATH/values.yaml"; git config --global user.name 'GitHub Actions'; git config --global user.email 'actions@github.com'; git add "$CHART_PATH/values.yaml"; git commit -m "Update values.yaml with new image tag: ${{ steps.get-version.outputs.new_tag }}" || echo "No changes to commit"; git pull --rebase --autostash; git push

      # Ya no se necesita 'Set up kubeconfig' si el runner tiene acceso local

      - name: Verify kubectl connection (Using default context)
        run: kubectl cluster-info

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.1 # O la versión que prefieras

      - name: Deploy with Helm
        run: |
          helm upgrade --install argocd-monitor "$CHART_PATH" \
            --namespace "$NAMESPACE" \
            --set config.slackWebhookUrl="${{ secrets.SLACK_WEBHOOK_URL }}" \
            --set image.tag=${{ steps.get-version.outputs.new_tag }} \
            --set image.repository=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
